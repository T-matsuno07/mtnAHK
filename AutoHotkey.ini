#Include IME_Func.ahk	;日本語入力のON/OFFを判定する為のライブラリ
#Include mb_send.ahk	;全角文字を出力
#Include check_window.ahk    ;プログラムチェック用関数
#Include move_key.ahk        ;カーソル移動用関数
#Include WindowMoveSize.ahk
;#Include like_emacs.ahk


GroupAdd, MySpace, ahk_class VTWin32
GroupAdd, MySpace, ahk_class Emacs
	/*

	Author:松野 司
	コメントアウト方法. 
	「"半角スペース" + ";"」の記号の後は全てコメント扱い
	複数行に渡るコメントはC言語と同じ記述方法
	
	AutoHotKey基本. 
	ボタンの組み合わせは以下の記号を用いて記述する. 
	 + Shift
	 ^ Ctrl
	 ! Alt
	 # Windows

	キー入力確認よう命令文
	SoundPlay,*64 ;音をならす命令文. ボタンが正常に動いているかどうかの確認用
	*/




	/*
	Alt + 組み合わせてアクティブウィンドウ切り替え
	Altキーとスペース等を同時押しすることによって, Alt+Tabと同じ操作をすることが出来る. 
	*/


	
	
!Space::!Tab			; Alt + Space -> Alt + Tab
!Esc::!+Tab			; Alt + Esc -> Alt + Shift + Tab(松野配置用)

<^Esc::ShiftAltTab
<^vk1Csc079::AltTab
>^.::AltTab
>^,::ShiftAltTab

; <^q::Send {BackSpace}
/*
>^]::AltTab
>^[::ShiftAltTab
*/



/*
WindowsキーやAltキーの近くに位置するzxcキーとの組み合わせによる操作を実装する
Win or Alt + Z はウィンドウを閉じる
*/
#z::!F4				; Win + z でウィンドウを閉じる


Pause & s::Send {Left}
Pause & f::Send {Right}
Pause & e::Send {Up}
Pause & d::Send {Down}
Pause & Space::AltTab

^h::Send {BackSpace}
;^+h::Send ^{BackSpace}
Pause & a::SoundPlay,*64




; 左Alt 押しながらホイール操作でアクティブウィンドウ切り替え
LAlt & WheelDown::AltTab
LAlt & WheelUp::ShiftAltTab


; キーボード右下の"\"を常時"_"に変更. "\"はBSの左のキーを用いること. 
$sc073::
	ret:=IME_CHECK("A")
	if(ret){
		Send {vkF4sc029}{_}{vkF3sc029}
	}else{
		Send {Blind}{_}
	}
return

/*
; "()"の入力は常に半角入力
$+8::
	ret:=IME_CHECK("A")
	if(ret){
		Send {vkF4sc029}({vkF3sc029}
	}else{
		Send (
	}
return


$+9::
	ret:=IME_CHECK("A")
	if(ret){
		Send {vkF4sc029}){vkF3sc029}
	}else{
		Send )
	}
return
; "()"の入力は常に半角入力[ここまで]

; マウス操作系
;
;
~LButton & XButton1::Send ^c
~LButton & XButton2::Send ^v

; 上のボタン
~XButton2 & RButton::Send, #{Space}	 ;Mission Cntrol表示

; 下のボタン
~XButton2 & LButton::Send, ^\	 ;ランチャーの表示

~LButton & c::
	Send ^c
return


~LButton & v::
	Send ^v
return





~Home::
If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 500)
{

	Send, ^{Home}
}
return




~End::
If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 500)
{

	Send, ^{End}
}
return



#Space::
If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 500)
{

	Send, #{Tab}
}
return





; Windows + Shift + F12: AutoHotKeyをすべて終了する。
#F12::
	exitApp,1
return

; Ctrl + Pause: リロード
^F12::
	Reload
	SoundPlay,*64
return



; Shift + Pause: Pause
!F12::Suspend ;新しいホットキーの入力を一切受け付けなくなる
!+F12::Pause  ;現在実行中の命令を一時停止


 ;コマンドプロンプトでもペースト可能にする
#IfWinActive ahk_class ConsoleWindowClass
^v::Send,!{Space}ep
#IfWinActive


; TeraPad 専用コマンド
#IfWinActive ahk_class TTeraPadMainForm

$^a::
	Send, {Home}
	Send, +{End}
	If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 1000)
	{
		Send, ^a  ; 全て選択
	}
return
#IfWinActive


; PowerPoint で 文字の拡大縮小を行う
#IfWinActive ahk_class PP12FrameClass
^;::^+.
^-::^+,
#IfWinActive





~LShift & RShift::
	Send, {End}
	If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 300)
	{
		Send, ^{End}
	}
return 


~RShift & LShift::
	Send, {Home}
	If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 300)
	{
		Send, ^{Home}
	}
return 


~LShift & RCtrl::
	Send, +{End}
	If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 300)
	{
		Send, ^+{End}
	}
return 


~RShift & LCtrl::
	Send, +{Home}
	If (A_PriorHotKey = A_ThisHotKey and A_TimeSincePriorHotkey < 300)
	{
		Send, ^+{Home}
	}
return 


~LCtrl & RCtrl::
	Send, {Right}
return

~RCtrl & LCtrl::
	Send, {Left}
return

~LCtrl & RShift::
	Send, +{Right}
return

~RCtrl & LShift::
	Send, +{Left}
return


+BackSpace::
	Send, {Home}+{End}{Delete}
return 

#a::WinSet, AlwaysOnTop, TOGGLE, A


;		SoundPlay,*64 ;音をならす命令文. ボタンが正常に動いているかどうかの確認用